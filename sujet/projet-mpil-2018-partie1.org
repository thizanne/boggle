#+latex-class: article
#+title: Boggle
#+subtitle: Projet MPIL 2018 @@latex:\\@@ Première partie
#+author: Thibault Suzanne @@latex:\\ \hrefmail{thi.suzanne@gmail.com}@@
#+options: toc:nil date:nil
#+latex_header: \input{util.tex}

#+BEGIN_flushright
#+BEGIN_scriptsize
#+begin_itshape
« Car le mot, qu'on le sache, est un être vivant. \\
La main du songeur vibre et tremble en l'écrivant ; \\
La plume, qui d'une aile allongeait l'envergure, \\
Frémit sur le papier quand sort cette figure » \\
#+end_itshape
Victor Hugo, /Les Contemplations (1856)/ \\
#+END_scriptsize
#+END_flushright

* Introduction

/Boggle/ [fn:boggle] est un jeu de lettres où les joueurs doivent, en
temps limité, former des mots à l'aide de lettres disposées
aléatoirement sur un plateau carré. Deux lettres consécutives dans un
mot doivent être adjacentes sur le plateau (elles doivent « se
toucher », éventuellement par la diagonale), et une case-lettre du
plateau ne peut être utilisée qu'une seule fois par mot. Les pluriels,
féminins et verbes conjugués sont autorisés. La Figure [[fig:boggle]]
présente une grille de Boggle où l'on peut notamment former les mots
/engoncer/ [fn:engoncer] (cf. Figure \ref{fig:boggle-engoncer}),
/songe/ et /secs/.

#+label: fig:boggle
\begin{figure}
  \begin{subfigure}[b]{0.4\textwidth}
    \includegraphics[width=\textwidth]{./img/Boggle.jpg}
    \caption{La grille de jeu}
  \end{subfigure}
  \hfill
  \begin{subfigure}[b]{0.4\textwidth}
    \includegraphics[width=\textwidth]{./img/Boggle-engoncer.jpg}
    \caption{Un chemin formant le mot \emph{engoncer}}
    \label{fig:boggle-engoncer}
  \end{subfigure}
  \caption{Un plateau de Boggle}
\end{figure}

Ce projet en deux parties consiste à implémenter le jeu de Boggle,
pour un joueur. Pour la première partie, détaillée dans cet énoncé,
vous implémenterez les bases du moteur de jeu, ainsi qu'un générateur
aléatoire de grilles et un solveur trouvant tous les mots du
plateau. La deuxième partie ajoutera une interface graphique
permettant de jouer en solitaire.

La Section [[sec:enonce-detaille]] détaille l'énoncé et précise le travail
à réaliser. La Section [[sec:consignes-generales]] donne les consignes
à suivre pour réaliser et rendre ce projet.

En Annexe, la Section [[sec:jbuilder]] détaille l'utilisation de
=jbuilder=, un système de compilation pour OCaml utilisé par défaut
dans le projet. La Section [[sec:interfaces]] indique les interfaces des
différents modules à implémenter
(cf. Section [[sec:enonce-detaille]]). Vous n'êtes pas obligés de lire ces
annexes pour réaliser le projet, mais elles peuvent le cas échéant
vous apporter des informations utiles.

*Vous avez jusqu'au 4 avril, 23h59 pour rendre votre travail. Les
projets rendus en retard seront pénalisés.*

* Énoncé détaillé
<<sec:enonce-detaille>>
** Travail demandé

La suite de cet énoncé présente différents /modules/, regroupés dans
une /bibliothèque/, et un /programme principal/. Votre tâche consiste
à écrire ces différents modules (cf. Section [[sec:differents-modules]]),
dans les fichiers spécifiés, puis à écrire le programme principal qui
respecte les spécifications demandées
(cf. Section [[sec:programme-final]]).

Vous allez télécharger une archive qui contient le squelette d'une
implémentation OCaml du projet. Vous pouvez si vous y tenez
implémenter ce projet dans un autre langage du cours MPIL (Swift ou
F\sharp), mais il est alors *impératif* que vous suiviez
rigoureusement l'architecture du projet telle qu'elle est définie dans
cet énoncé (les différents répertoires comme l'organisation et
l'interface des modules).

** Rappel des règles du jeu

Un tableau de Boggle de dimension $N$ est une grille carrée de $N$
lignes et $N$ colonnes contenant $N^2$ cases, dans chacune desquelles
se trouve une lettre. Dans le cadre de ce projet, les lettres seront
en minuscules et non-accentuées.

Le but du jeu est de former des mots à l'aide de suites de lettres
adjacentes (par un côté ou par un coin) de la grille. Une lettre de la
grille ne peut être présente qu'au plus une fois dans un mot
formé.

Toutes les formes des mots sont autorisées : verbe conjugué, pluriel,
féminin... Les lettres étant non-accentuées, on retire aussi les
accents sur les mots (par exemple, le mot /hypothese/ sera considéré
comme un mot français valide). On fixe une longueur minimale aux mots
à former : dans le Boggle classique, elle est de 3. D'autres versions
proposent 2. Ces questions seront résolues en spécifiant explicitement
dans un fichier tous les mots autorisés.

Le jeu classique propose à plusieurs utilisateurs de chercher
simultanément des mots en un temps limité. On compte ensuite les
points de chaque utilisateur à partir des mots qu'il a été le seul
à trouver et de leur longueur. D'autres versions proposent des
variantes, comme des lettres accordant des points en fonction de leur
rareté (comme au Scrabble, il devient alors intéressant de former des
mots avec le ~W~ s'il est présent sur la grille -- mais c'est aussi
plus difficile !), des cases /lettre compte double/ ou /mot compte
triple/... Ce projet se limitera à un seul joueur, et on ne fera pas
de décompte des points dans la première partie.

** Architecture du projet

Cette section présente l'organisation technique du projet. Vous devez
*impérativement* respecter cette organisation dans votre rendu.

*** Les différents dossiers

Les différents dossiers présents à la racine du projet sont :

- ~bin/~ : :: contiendra le code de votre programme (exécutable)
              principal.
- ~dict/~ : :: contient des fichiers /dictionnaire/ avec les listes de
               mots valides.
- ~lib/~ : :: contient les différents modules du moteur de jeu,
              utilisables sous la forme d'une bibliothèque ~Boggle~.
- ~sujet/~ : :: contient l'énoncé du projet.

Certains fichiers sont déjà présents dans ces dossiers, comme
~boggle.opam~ ou ~jbuild~. *Vous ne devez pas les supprimer :* ils
sont nécessaires pour la compilation du projet avec les outils
choisis. En cas de suppression accidentelle, vous pouvez simplement
les récupérer dans l'archive initiale et les recopier.

** Les différents modules
<<sec:differents-modules>>

Le répertoire ~lib/~ contient les différents modules qu'on vous
demande de programmer. Dans le cadre de ce projet, on ne vous demande
d'écrire que les implémentations des modules. En outre, les différents
types vous sont fournis : vous n'avez que les différentes fonctions
à programmer.

Les modules sont présentés ici dans l'ordre qu'on vous conseille
d'adopter pour les programmer, mais vous êtes libres de le faire dans
un autre ordre.

Chaque module est fourni avec un module d'implémentation factice qui
appelle ~failwith "Unimplemented"~ pour chaque fonction demandée. On
a ainsi un projet qui compile même lorsque les fonctions demandées ne
sont pas encore écrites (ce qui pourra vous être utile pour tester
votre code). Votre travail consiste à remplacer les lignes ~failwith
"Unimplemented"~ par une implémentation correcte de chaque fonction.

Les fonctions à compléter impérativement sont celles qui apparaissent
dans les fichiers ~nomDuModule.mli~ correspondant aux modules
considérés. Elles sont accompagnées d'une courte documentation
expliquant le fonctionnement attendu. Certains fichiers contiennent
d'autre fonctions, suggérées pour guider votre travail : vous pouvez
choisir de ne pas les implémenter si vous avez en tête une solution
différente pour les fonctions obligatoires.

*** RandomLetter

/Ce module est déjà implémenté : vous pouvez l'utiliser directement./

~RandomLetter~ est un module permettant de choisir une lettre
aléatoirement, en fonction d'une certaine /distribution/, c'est-à-dire
de la probabilité d'apparition de chaque lettre dans un texte choisi
au hasard.

Il fonctionne à l'aide d'une /fonction d'ordre supérieur/ qui prend en
paramètre une distribution et renvoie une fonction, de type ~unit ->
char~, qui renvoie elle-même un caractère aléatoire à chaque
appel. Lorsque vous souhaitez tirer des lettres aléatoirement, le
style conseillé est donc de commencer par déclarer une fonction
~picker~ qui fera le tirage, puis d'appeler cette fonction. La
documentation de ~RandomLetter~ présente un exemple.

Le sous-module ~Distribution~ du module ~RandomLetter~ contient deux
distributions que vous pouvez utiliser : la distribution uniforme
~uniform~, qui donnera à chaque lettre une probabilité identique
d'apparition, et la distribution ~fr~ qui donnera à chaque lettre une
probabilité d'apparition égale à sa fréquence dans la langue
française.

Pour utiliser ces distributions en dehors du module ~RandomLetter~, il
suffit d'écrire par exemple ~RandomLetter.Distribution.fr~.

*** Iter

/Ce module est déjà implémenté : vous pouvez l'utiliser directement./

~Iter~ est un module implémentant des /itérateurs/ sur des valeurs
d'un certain type. Ces itérateurs correspondent à des /séquences/
d'éléments de ce type, c'est-à-dire d'un certain nombre,
éventuellement infini, d'éléments qui se suivent. Les itérateurs
seront utilisés dans plusieurs modules du projet.

L'interface du module précise toutes les fonctions qu'il
exporte. Toutes les fonctions qui ne forcent pas l'itérateur (voir la
documentation dans =Iter.mli=) s'exécutent en temps constant. Les
opérations qui forcent l'itérateur ont une complexité linéaire en la
taille de la séquence sous-jacente (elles ne terminent donc pas si
cette séquence est infinie).

Les itérateurs sont semblables aux /streams/ que vous avez déjà vus,
mais ils sont purement fonctionnels : parcourir un itérateur en le
forçant ne le consomme pas, il reste utilisable. Ainsi on peut obtenir
le comportement suivant :

#+BEGIN_SRC ocaml
# let x = Iter.range 0 9;;
val x : int Iter.t = <fun>
# Iter.iter print_int x;;
0123456789- : unit = ()
# Iter.iter print_int x;;
0123456789- : unit = ()
#+END_SRC

*** Board

/L'interface de ce module vous est fournie : à vous de compléter son
implémentation./

Le module ~Board~ vous servira d'échauffement avant de vous attaquer
au reste du projet : il s'agit d'implémenter diverses fonctions
simples pour gérer les tableaux de Boggle.

Un tableau de Boggle sera simplement représenté par un tableau de
tableaux de caractères : ~char array array~.

*** Lexicon

/L'interface de ce module vous est fournie : à vous de compléter son
implémentation./

Le module ~Lexicon~ implémente des /lexiques/, c'est-à-dire des
ensembles de mots. Ces ensembles sont implémentés sous la forme
d'/arbres préfixes/, ou /tries/.

Dans un arbre préfixe, les nœuds ne stockent pas la chaîne à laquelle
ils correspondent : c'est leur position dans l'arbre qui la
définit. En effet, les /arêtes/ de l'arbre sont étiquetées par des
caractères : pour connaître le mot associé à un nœud, il faut
descendre vers ce nœud depuis la racine, et la suite de lettres
rencontrées sur les arêtes forme le mot recherché. Les nœuds de
l'arbre sont, eux, étiquetés par un booléen qui indique s'ils
correspondent à un mot appartenant au langage représenté.

#+label: fig:arbre-prefixe
\begin{figure}
  \centering
  \begin{forest}
    for tree={
      circle,
      draw,
      thick,
      edge={->,>=stealth,draw=cyan,thick},
      s sep=3em,
      inner sep=0.5em
    }
    [  %
      [ , edge label={node[midway,above left]{a}}
        [ , edge label={node[midway,left]{m}}
          [ , edge label={node[midway,left]{i}}, fill=cyan]
        ]
      ]
      [ , edge label={node[midway,left]{t}}
        [ , edge label={node[midway,above left]{o}}
          [ , edge label={node[midway,left]{n}}, fill=cyan]
        ]
        [ , edge label={node[midway,left]{a}}
          [ , edge label={node[midway,left]{s}}, fill=cyan
            [ , edge label={node[midway,left]{s}}
              [ , edge label={node[midway,left]{e}}, fill=cyan]
            ]
          ]
          [ , edge label={node[midway,right]{p}}
            [ , edge label={node[midway,right]{e}}, fill=cyan]
          ]
        ]
        [ , edge label={node[midway,above left]{i}}
          [ , edge label={node[midway,left]{r}}, fill=cyan
            [ , edge label={node[midway,left]{e}}, fill=cyan
              [ , edge label={node[midway,left]{r}}, fill=cyan]
            ]
          ]
        ]
      ]
      [ , edge label={node[midway,above left]{b}}
        [ , edge label={node[midway,left]{u}}
          [ , edge label={node[midway,left]{t}}, fill=cyan]
        ]
        [ , edge label={node[midway,left]{o}}
          [ , edge label={node[midway,left]{n}}, fill=cyan]
        ]
      ]
    ]
\end{forest}
\caption{Un exemple d'arbre préfixe}
\end{figure}

La Figure [[fig:arbre-prefixe]] montre un exemple d'arbre préfixe. Les
nœuds pleins indiquent qu'il s'agit d'une fin de mot du
langage. Ainsi, l'ensemble de mots représenté contient par exemple les
mots /ami/, /tas/, /tasse/ et /tire/, mais pas le mot /tass/, qui
n'arrive pas sur un nœud « fin de mot ».

Lorsqu'on veut représenter des ensembles /de mots/, cette structure
a plusieurs avantages par rapport aux représentations génériques des
ensembles (comme celle du module ~Set~ d'OCaml que vous avez peut-être
utilisé) :

- Son empreinte mémoire est réduite, une même lettre étant utilisée
  pour plusieurs mots de l'ensemble.
- Elle fournit la plupart des opérations standards avec une meilleure
  complexité : par exemple, l'ajout d'un mot de longueur $l$ dans un
  lexique de taille $N$ se fait en $O(l)$ plutôt qu'en $O(N)$, ce qui
  est dans les cas d'utilisations typiques bien meilleur.
- Elle permet d'implémenter très rapidement l'opération, pour une
  lettre α, qui consiste à /renvoyer l'ensemble des mots commençant
  par α, auxquels on a retiré ce α/ (on l'appellera /suffixes de
  α/). En effet, il suffit de renvoyer le sous-arbre qu'on atteint par
  l'arête étiquetée par α. Par exemple, sur le lexique de la
  Figure [[fig:arbre-prefixe]], les /suffixes de b/ sont les mots /ut/ et
  /on/. Cette opération sera particulièrement utile pour résoudre les
  grilles de Boggle.

Le module ~Lexicon~ utilise un sous-module ~M~ qui implémente des
tables d'association (clef \mapsto{} valeur) dans le type ~'a M.t~ : une
clef est un caractère (de type ~char~), la valeur associée est de type
~'a~. On utilise à cette fin le module ~Map~ de la bibliothèque
standard, dont la documentation est disponible à l'adresse
[[https://caml.inria.fr/pub/docs/manual-ocaml/libref/Map.Make.html]].

Le module ~M~ fourni implémente également une fonction ~to_iter~ qui
renvoie un itérateur sur toutes les paires (clef, valeur) présentes
dans la table. Vous pouvez vous en servir pour écrire les autres
fonctions de ~Lexicon~.

Comme pour ~RandomLetter~, toutes les fonctions du module ~M~ (celles
provenant de ~Map~ ainsi que ~to_iter~) sont accessibles dans le
module ~Lexicon~ en écrivant ~M.nom_de_la_fonction~.

Le type des lexiques est alors défini comme indiqué en
Figure [[fig:type-lexicon]]. Pour comprendre cette définition, on peut la
voir comme la représentation d'un lexique par son nœud racine. Le
champ ~eow~ indique le cas échéant que ce nœud correspond à une fin de
mot (le lexique ayant cette racine contient donc le mot vide ~""~), et
le champ ~words~ représente les arêtes reliant le nœud à ses fils :
à chaque lettre, on associe (s'il existe) le nœud atteint en suivant
l'arête étiquetée par cette lettre. Le cas de base de ce type récursif
est réalisé par un nœud dont le champ ~word~ est une table
d'association vide.

#+label: fig:type-lexicon
#+caption: Le type OCaml des lexiques
#+begin_figure
#+BEGIN_SRC ocaml
type t = {
  eow : bool;
  words : t M.t;
}
#+END_SRC
#+end_figure

La fonction ~load_file~ vous est déjà fournie. Le fichier
~dict/dico_fr.txt~ contient une liste de tous les mots valides en
français (pluriels et verbes conjugués compris), un mot par ligne. Le
répertoire ~dict~ contient également un fichier ~dico_fr_petit.txt~
qui liste les 100 premiers mots français. Vous pouvez si vous le
souhaitez vous en servir pour faire des tests. *Vous ne devez pas
modifier ~dico_fr.txt~ :* il servira de référence pour le programme
final.

*** Path

/L'interface de ce module vous est fournie : à vous de compléter son
implémentation./

Le module ~Path~ vous servira à manipuler des /chemins/ sur une grille
de Boggle. Un chemin est une séquence de cases de la grille qui
respecte les deux invariants suivants :

- Deux cases consécutives dans le chemin sont voisines sur la grille.
- Toute case de la grille est présente au plus une fois dans le
  chemin.

#+begin_remarque

Comme les règles le précisent, deux cases voisines sont deux cases
« qui se touchent » par un côté ou par un angle. On remarquera que
toutes les cases n'ont pas 8 voisins : par exemple, les cases tout
à droite n'ont pas de voisin droit.

#+end_remarque

Ces chemins correspondent donc aux « trajets » que l'on peut suivre
sur la grille pour former des mots. Les fonctions du module ~Path~
doivent garantir qu'on ne peut former que des chemins valides (qui
respectent les deux invariants).

Un chemin est simplement représenté par une liste de coordonnées
(numéro de ligne, numéro de colonne) de cases de la grille. N'oubliez
pas que le module ~Lexicon~ vous permet de construire des ensembles de
mots (où chaque mot n'est par définition présent qu'une seule fois).

*** Solver

/L'interface de ce module vous est fournie : à vous de compléter son
implémentation./

Le module ~Solver~ fournit une méthode de résolution de grilles de
Boggle, qui trouve tous les mots formables pour une grille donnée.

On utilisera à cette fin la technique du /retour sur trace/, aussi
appelée /backtracking/ [fn:backtracking]. Le retour sur trace est une
technique de programmation, ainsi qu'une famille d'algorithmes qui la
mettent en œuvre, consistant à prendre des décisions pour faire
avancer la résolution d'un problème et à revenir en arrière en cas de
blocage (c'est-à-dire lorsqu'il s'avère que ces décisions sont
incohérentes).

Si vous avez déjà résolu des Sudoku de difficulté élevée, vous avez
sans doute déjà utilisé cette technique sans le savoir : on essaye de
placer un chiffre dans un case, on continue la résolution de la grille
avec ce chiffre, et s'il s'avère qu'elle est impossible, on efface le
chiffre et on en essaye un autre.

L'application du backtracking au Boggle consiste schématiquement
à ajouter des cases à un chemin jusqu'à ce qu'on ne puisse plus former
aucun mot avec le chemin en cours (en calculant successivement les
suffixes de chaque lettre qu'on ajoute). À chaque fois qu'on arrive
sur une fin de mot possible, on ajoute le mot aux solutions.

#+label: alg:backtrack
\begin{algorithm}
  \SetKwFunction{backtrack}{BackTrack}

  \Function{\backtrack{$board$, $lexicon$, $path$, ($i$, $j$)}} {
    \KwIn{\\
      \quad $board$ : une grille de Boggle \\
      \quad $lexicon$ : les suffixes du chemin déjà parcouru parmi les mots autorisés \\
      \quad $path$ : le chemin déjà parcouru \\
      \quad ($i$, $j$) : les coordonnées d'une case à essayer d'ajouter au chemin déjà parcouru
    }
    \KwOut{\\ \quad Un itérateur sur tous les chemins commençant par $path$ formant un mot valide}
    \uIf{On peut ajouter $(i, j)$ à $path$} {
      $path'$ ← $path$ ++ $(i, j)$ \;
      $α$ ← lettre de la case $(i, j)$ \;
      $lexicon'$ ← suffixes de $α$ dans $lexicon$ \;
      \uIf{$lexicon'$ est vide} {
        \Return {$\emptyset$}
      } \Else {
        \uIf{$lexicon'$ contient le mot vide} {
          $solution\_chemin\_courant$ ← $\{ path' \}$ \;
        } \Else {
          $solution\_chemin\_courant$ ← $\emptyset$ \;
        }
        $solutions\_via\_voisins$ ← $\bigcup_{(i', j') ~∈~ \text{voisins de }(i, j)}$ \backtrack{board, lexicon', path', (i', j')} \;
        \Return{$solution\_chemin\_courant \cup solutions\_via\_voisins$}
      }
    } \Else {
      \Return{$\emptyset$} \;
    }
  }

  \BlankLine \BlankLine

  \SetKwFunction{findallpaths}{FindAllPaths}

  \Function{\findallpaths{$board$, $lexicon$}} {
    \KwIn{\\
      \quad $board$ : une grille de Boggle \\
      \quad $lexicon$ : un lexique de mots autorisés
    }
    \KwOut{\\
      \quad Un itérateur sur tous les chemins sur la grille formant un mot autorisé
    }
    \Return{$\bigcup_{ (i, j) ~∈~ \text{cases de la grille} } \backtrack{board, lexicon, empty path, (i, j)}$} \;
  }

  \BlankLine \BlankLine

  \caption{Résolution d'une grille de Boggle par backtracking}
\end{algorithm}

L'Algorithme [[alg:backtrack]] formalise cette explication. La fonction
\backtrack est le cœur de la résolution : elle visite une case en
l'ajoutant à un chemin déjà parcouru et avance dans les mots du
lexique en sélectionnant les suffixes de la lettre inscrite sur la
case visitée. Si on arrive sur une fin de mot, le chemin parcouru
(auquel on a ajouté la case en cours) est un chemin valide. \backtrack
s'appelle récursivement pour calculer les chemins valides en passant
par les voisins de la case visitée, et renvoie le total des chemins
obtenus. \findallpaths appelle simplement \backtrack sur chaque case
de la grille avec un lexique initial et un chemin initialement vide.

La présentation de l'Algorithme [[alg:backtrack]] utilise des notations
ensemblistes pour les itérateurs. Voici un bref rappel de leurs
significations : $\emptyset$ est l'itérateur vide, $\{x\}$ est
l'itérateur sur un seul élément $x$, et si $iter$ est un itérateur sur
des valeurs \(x_0, x_1, x_2, ...\) de type $τ$ et $f$ une fonction de
type $τ → υ \texttt{ Iter.t}$, alors $\bigcup_{x ~∈~ iter} f(x)$ est
un itérateur sur des valeurs de type $υ$ qui itère successivement sur
tous les éléments des $f(x_i)$. À quelle fonction du module =Iter=
cette notation vous fait-elle penser ?

Votre travail sur le module =Solver= consiste à implémenter ces deux
fonctions. On vous donne l'algorithme détaillé, il ne vous reste donc
plus qu'à l'adapter en OCaml à l'aide des modules que vous avez déjà
implémentés.

** Le programme final
<<sec:programme-final>>

/C'est à vous d'implémenter ce programme./

Une fois tous les différents modules de la bibliothèque implémentés et
testés, il ne vous reste plus qu'à écrire le programme final. Le
fichier correspondant est =bin/main.ml=. Il est compilé avec la
bibliothèque par la commande ~$ make~ (depuis le répertoire racine du
projet) et peut être exécuté avec la commande ~$ ./run.sh~. Vérifiez
que ces commandes fonctionnent : si vous n'avez pas modifié le fichier
=bin/main.ml=, le programme doit simplement afficher un message vous
invitant au travail.

On prendra comme mots valides la liste des mots du fichier
~dict/dico_fr.txt~ de 3 lettres ou plus. Attention : vous n'avez pas
le droit de modifier ce fichier ! Vous n'avez pas non plus le droit
d'en créer un autre qui contienne uniquement les mots de plus de
3 lettres. Utilisez les fonctions que vous avez écrites pour
construire cette liste.

Exécuté avec la commande ~$ ./run.sh~, le programme doit :

1. Afficher une grille de Boggle aléatoire, avec la fréquence des
   lettres adaptée au français.
2. Afficher un message invitant l'utilisateur à appuyer sur \keyenter,
   et attendre cet évènement. [fn:read_line]
4. Afficher toutes les solutions de la grille (rappel : d'au moins
   3 lettres), classées par ordre décroissant de longueur puis par
   ordre alphabétique croissant. [fn:sort] Chaque mot ne doit être
   affiché qu'une seule fois.

Ce programme peut également prendre un paramètre dans la ligne de
commande, qui lui sera alors passé de la façon suivante : ~./run.sh
unparametre~. S'il est présent, ce paramètre sera considéré comme une
grille à résoudre, donnée par ses lettres (en minuscule) dans l'ordre
usuel de lecture (de gauche à droite, puis de haut en bas). Le
programme devra alors simplement afficher toutes les solutions de la
grille, avec les mêmes contraintes que précédemment : elles doivent
être classées par ordre décroissant de longueur puis par ordre
alphabétique croissant, et chaque mot ne doit être affiché qu'une
seule fois. *Note :* on pourra supposer que tous les caractères de
~unparametre~ sont des lettres minuscules sans le vérifier.

Les modules de la bibliothèque que vous avez écrits sont regroupés
dans un super-module ~Boggle~ (par exemple, vous pouvez appeler la
fonction ~Boggle.Lexicon.has_empty_word~.)

Certaines opérations du programme peuvent échouer, la fonction
correspondante renvoyant alors ~None~. Le programme devra alors
terminer prématurément en affichant un message décrivant l'erreur
rencontrée. Pour terminer le programme OCaml, vous pourrez écrire
~exit 1~.

* Déroulement du projet et consignes générales
<<sec:consignes-generales>>

** Téléchargement du squelette

Le squelette du projet est disponible à l'adresse
[[https://www.di.ens.fr/~suzanne/misc/boggle.tar.gz]]. Téléchargez
l'archive et extrayez la (=$ tar xzvf boggle.tar.gz= sous Linux). Elle
contient un dossier =boggle= contenant lui-même le squelette du projet
(ainsi qu'une copie PDF de cet énoncé).

** Mise en place de l'environnement

*** À la PPTI
<<sec:config-ppti>>

Le projet est prévu pour compiler dans l'environnement de la PPTI,
auquel on a ajouté et configuré /opam/, le gestionnaire de paquets
moderne pour OCaml. Vous n'avez pas besoin de manipuler opam par
vous-mêmes, mais vous avez besoin de configurer votre shell afin
d'intégrer son environnement. Pour cela, ajoutez les lignes suivantes
à votre fichier =~/.bashrc= (ou l'équivalent si vous utilisez un autre
shell) :

#+BEGIN_SRC bash
# OPAM configuration
PATH=$PATH:/users/Enseignants/suzanne/bin; export PATH;
eval $(opam config env --root="/users/Enseignants/suzanne/.opam")
#+END_SRC

Si vous avez déjà des lignes similaires, remplacez les par
celles-ci. En cas de doute, envoyez un mail
à \hrefmail{thi.suzanne@gmail.com}. Relancez ensuite bash pour
recharger cette configuration.

*** Sur vos machines personnelles

Si vous souhaitez travailler sur vos machines personnelles, vous aurez
besoin d'un environnement OCaml comprenant au moins =jbuilder=, ainsi
qu'=odoc= si vous souhaitez générer la documentation HTML
(cf. Section [[sec:jbuilder]]). Il est également conseillé d'utiliser la
même version d'OCaml qu'à la PPTI pour être sûr d'écrire un programme
qui compilera sur l'environnement d'évaluation.

Pour mettre en place cet environnement, vous pouvez utiliser les
commandes suivantes :

#+BEGIN_SRC shell
  # Pour installer opam la première fois :
  $ apt install opam # Ou l'équivalent pour votre système d'exploitation/distribution
  $ opam init --comp 4.06.0
  # opam vous proposera alors d'éditer le fichier de configuration de
  # votre shell pour charger automatiquement les variables
  # d'environnement nécessaires à son fonctionnement. Acceptez.

  # Pour mettre en place l'environnement :
  $ opam switch 4.06.0
  $ eval $(opam config env)
  $ opam install jbuilder odoc
#+END_SRC

Vous pourrez ensuite compiler et exécuter le squelette du projet. En
cas de question ou de problème, envoyez un mail
à \hrefmail{thi.suzanne@gmail.com}.

** Environnement, compilation et exécution

Le projet est fourni avec un =Makefile= et un script =run.sh=. La
commande =$ make= compile le projet, et la command =$ ./run.sh=
l'exécute. Le squelette OCaml contient une version préécrite de ces
deux commandes qui fonctionne dans l'environnement OCaml de la PPTI
(configuré comme indiqué en Section [[sec:config-ppti]]).

Si vous utilisez un autre langage, vous devez écrire un =Makefile= et
un script =run.sh= qui respectivement compilent et exécutent le projet
dans l'environnement par défaut de la PPTI (c'est-à-dire
l'environnement de base accessible à un nouvel utilisateur, sans
configuration supplémentaire).

L'environnement de compilation et d'exécution en OCaml proposé dans le
squelette utilise =jbuilder=. La Section [[sec:jbuilder]] en annexe
développe son utilisation, ainsi que des commandes supplémentaires qui
peuvent vous servir.

Quel que soit le langage choisi, vous devez *impérativement* rendre un
projet qui *compile sans erreur* avec la commande =$ make= et qui
s'exécute avec la commande =$ ./run.sh=.

** Rendu

*Rappel : Vous avez jusqu'au 4 avril, 23h59 pour rendre votre
travail.*

Vous garderez l'architecture des différents dossiers telle qu'elle
vous a été distribuée. Vous renommerez le dossier principal
(initialement =boggle=) en =boggle_<votrenom>= (évidemment, vous
remplacerez =<votrenom>= par votre nom de famille).

Vous placerez ensuite ce dossier dans une archive =.zip=. Pour cela,
sous Linux, placez-vous *dans le dossier contenant le dossier
=boggle_<votrenom>=* et exécutez la commande suivante :

: $ zip -r boggle_<votrenom> boggle_<votrenom>

Vérifiez que l'archive ainsi générée (qui doit s'appeler
=boggle_<votrenom>.zip=) contient bien un dossier =boggle_<votrenom>=
qui contient lui-même votre code. Vous pouvez par exemple exécuter la
commande suivante dans l'environnement de la PPTI (dans lequel elle
doit fonctionner) :

: $ unzip boggle_<votrenom>.zip

*Si vous faites ce projet en binôme*, remplacez dans les instructions
précédentes =<votrenom>= par =<nom1>_<nom2>=, où =<nom1>= et =<nom2>=
sont vos deux noms de famille.

Vous enverrez ensuite l'archive =.zip= obtenue par mail à l'équipe
pédagogique (voir le lien sur la page web du cours, à l'adresse
http://www-licence.ufr-info-p6.jussieu.fr/lmd/licence/2017/ue/3I008-2018fev/). Vous
indiquerez comme sujet du mail =[Rendu MPIL 1] <nom1> <nom2>=.

*La notation tiendra très fortement compte du respect de ces
consignes !*


#+latex: \label{before-appendices}
#+latex: \begin{appendices}

#+latex: \newpage

* Utilisation de jbuilder
<<sec:jbuilder>>

Le projet utilise par défaut ~jbuilder~ (qui sera bientôt renommé
~dune~), un système de compilation moderne pour OCaml. Les fichiers
nécessaires à son bon fonctionnement vous sont fournis, ainsi qu'un
=Makefile= et un script =run.sh= qui encapsulent son utilisation.

Vous pouvez également utiliser les commandes suivantes (à la racine du
projet) :

- ~jbuilder build lib/.merlin~ : :: génère le fichier
     ~lib/.merlin~. Vous pouvez également générer ~bin/.merlin~, pour
     utiliser merlin lors de l'édition des différents
     fichiers.
- ~jbuilder build @doc~ : :: génère la documentation en format web de
     l'interface des différents modules de la bibliothèque
     ~Boggle~. Vous pouvez ensuite consulter cette documentation en
     ouvrant avec votre navigateur le fichier
     ~_build/default/_doc/boggle/Boggle/index.html~. Il s'agit d'une
     version plus agréable à lire (et avec des liens cliquables entre
     les différents modules) de la documentation présente dans les
     fichiers ~.mli~.
- ~jbuilder build~ : :: compile la librairie ~Boggle~ et l'exécutable
     ~boggle~ (qu'on vous demande de programmer).
- ~jbuilder exec boggle [args]~ : :: lance l'exécutable ~boggle~ avec
     les paramètres optionnels ~args~ (voir la
     Section [[sec:programme-final]]).
- ~jbuilder utop~ : :: lance ~utop~, un terminal OCaml, en chargeant
     automatiquement la librairie ~Boggle~. *Cette commande est très
     utile pour tester votre implémentation des différents modules*.
- ~jbuilder clean~ : :: supprime les fichiers générés par ~jbuilder~
     pour repartir à neuf. Attention, cette commande supprime
     également la documentation et les fichiers ~.merlin~, il faudra
     les générer à nouveau.

# * Rappels sur la programmation modulaire en OCaml

# <<sec:introduction-modules>>

# Vous savez normalement déjà utiliser les modules en OCaml. Puisqu'il
# s'agit d'une part importante de l'organisation du projet, cette
# section sert de rappel et éventuellement de précisions de certains
# points.

# À toutes fins utiles, la documentation OCaml sur les modules est
# consultable en ligne à l'adresse
# https://caml.inria.fr/pub/docs/manual-ocaml/moduleexamples.html. Attention :
# il s'agit d'une documentation technique de référence, pas d'un
# tutoriel accessible pour des débutants.

# ** Généralités

# Si vous avez jusqu'ici programmé en OCaml en regroupant toutes vos
# définitions dans un seul fichier, sachez qu'il est aussi possible de
# les découper en plusieurs fichiers, qui représentent des /modules/ de
# votre programme.

# Un module est représenté par deux fichiers : le fichier
# ~nomDuModule.ml~, qui contient son /implémentation/, et le fichier
# ~nomDuModule.mli~, qui contient son /interface/. L'implémentation du
# module correspond à ce que vous avez l'habitude d'écrire : des
# déclarations de types et des fonctions permettant d'utiliser les types
# en question. L'interface spécifie ce que le module /exporte/,
# c'est-à-dire ce qu'il est possible d'utiliser /en dehors du module/,
# dans d'autres fichiers. Vous n'avez pas besoin d'écrire des interfaces
# dans le cadre de ce projet, on ne s'attardera donc pas sur la syntaxe
# de ces fichiers. Vous êtes libres d'écrire autant de fonctions
# additionnelles que vous le désirez dans l'implémentation, mais vous ne
# pourrez pas les utiliser de l'extérieur.

# Si votre module est représenté par les fichiers ~nomDuModule.ml~ et
# ~nomDuModule.mli~, et qu'il fournit une fonction ~nom_de_la_fonction~,
# vous pourrez utiliser cette fonction depuis l'extérieur du module
# (c'est-à-dire dans d'autres fichiers) en écrivant
# ~NomDuModule.nom_de_la_fonction~. Notez la majuscule qui commence
# ~NomDuModule~, les autres lettres respectant la casse initiale. De
# même, si votre module définit un type ~t~, vous pourrez y faire
# référence comme ~NomDuModule.t~.

# #+begin_remarque

# On peut également /ouvrir/ un module en écrivant ~open NomDuModule~ :
# tous les types et fonctions définis dans le module sont alors
# accessibles directement en écrivant leur nom. *Sauf dans certains cas
# particuliers, il est déconseillé de procéder ainsi*, entre autres
# parce qu'il devient difficile de se repérer dans le code et de savoir
# d'où viennent les différentes fonctions utilisées. Il vaut mieux être
# explicite, quitte à être légèrement plus verbeux.

# Vous noterez qu'on vous proposer d'utiliser ~open~ pour écrire le
# programme principal. Il s'agit en effet d'un cas où c'est une bonne
# solution, pour les raisons suivantes :

# - Le module ~Boggle~ et l'exécutable principal appartiennent au même
#   projet, donc :
#   - On sait exactement ce qu'on importe et on a le contrôle dessus.
#   - On connaît parfaitement le contenu de ~Boggle~ : on sait donc
#     exactement à quoi fait référence le module ~Lexicon~ sans avoir
#     besoin de préciser ~Boggle.Lexicon~. On est donc dans un cas où
#     l'expliciter n'apporte aucune information ni clarté supplémentaire
#     (mais reste aussi verbeux).
# - Le module ~Boggle~ n'exporte que des sous-modules dont le nom ne
#   correspond à aucun autre nom de module OCaml utilisé : il n'y a pas
#   de risque de redéfinir accidentellement des modules ou des fonctions
#   qu'on aurait voulu utiliser.

# En règle générale : dans le doute, soyez explicite.

# #+end_remarque

# ** Types abstraits

# Lorsqu'ils exportent un type ~t~, certains modules spécifient dans
# leur interface la façon dont il est implémenté : c'est le cas par
# exemple du module ~Iter~ (vérifiez sa documentation). Dans ce cas,
# vous pouvez, en dehors du module, utiliser ce type comme s'il était
# déclaré dans le fichier que vous éditez (ce que vous avez l'habitude
# de faire).

# D'autres modules ne spécifient pas son implémentation (c'est le cas de
# ~Board~) : on dit alors que le type est /abstrait/. Même si vous savez
# en tant que programmeur comment il est implémenté, vous ne pouvez pas
# utiliser cette information dans d'autres modules.

# Par exemple, le module ~Board~ implémente les grilles comme des
# tableaux de tableaux de caractères : ~char array array~. À l'intérieur
# du module, donc dans le fichier ~board.ml~, vous utiliserez cette
# représentation pour écrire les différentes fonctions. À l'extérieur du
# module, vous ne pourrez pas générer une valeur de type ~Board.t~ en
# déclarant un tableaux de tableaux de caractères, pas plus que vous ne
# pourrez utiliser les fonctions habituellement disponibles sur les
# tableaux pour manipuler un ~Board.t~. Vous serez limités aux fonctions
# exportées par le module ~Board~.

# Les types abstraits correspondent en partie à ce que vous avez
# peut-être déjà appelé /l'encapsulation/ dans les langages orientés
# objets (qui correspond entre autres aux attributs et méthodes
# privées). Ils permettent de cacher des détails d'implémentation
# à l'utilisateur, de sorte qu'en n'utilisant que les fonctions fournies
# par le module, il s'assure d'une part de ne pas construire des valeurs
# incohérentes et d'autre part d'avoir un programme qui continuera
# à fonctionner même si l'implémentation du module (y compris ses types)
# change dans le futur.

# ~jbuilder~ gère automatiquement la compilation d'un programme réparti
# en plusieurs fichiers, vous n'avez donc rien d'autre de particulier
# à savoir.


#+latex: \newpage

* Interfaces
<<sec:interfaces>>

Cette fonction rappelle les interfaces des différents modules, tels
qu'ils sont fournis avec le squelette de base. On rappelle que chaque
fichier dont le contenu est rappelé ici est situé dans le répertoire
=lib/= du projet.

** =iter.mli=

#+INCLUDE: "../lib/iter.mli" src ocaml

** =randomLetter.mli=

#+INCLUDE: "../lib/randomLetter.mli" src ocaml

** =board.mli=

#+INCLUDE: "../lib/board.mli" src ocaml

** =path.mli==

#+INCLUDE: "../lib/path.mli" src ocaml

** =lexicon.mli=

#+INCLUDE: "../lib/lexicon.mli" src ocaml

** =solver.mli=

#+INCLUDE: "../lib/solver.mli" src ocaml

#+latex: \end{appendices}

* Footnotes

[fn:boggle] http://www.boggle.fr/

[fn:backtracking] Bien qu'anglais, ce mot est quasi-systématiquement
utilisé, y compris en français.

[fn:read_line] Conseil : utilisez ~read_line~.

[fn:sort] Conseil : passez par les listes et utilisez ~List.sort~.

[fn:engoncer] *ENGONCER* v. tr. (se conjugue comme /Avancer/). XVII^e
siècle. Dérivé de /gons/, ancien pluriel de /gond/, par comparaison
plaisante.  En parlant d'un vêtement, habiller d'une façon
disgracieuse, qui fait paraître le cou enfoncé dans les épaules. /Cet
habit vous engonce./ Par ext. Fig. /Avoir l'air engoncé/, guindé,
contraint. /Source : Dictionnaire de l'Académie Française, 9^e
édition./
